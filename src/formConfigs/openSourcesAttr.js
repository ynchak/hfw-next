import useSaveFormStore from '../store';
import { openInNewTab } from '../utils';

const maxLines = 40;

const param = {
  address: 'https://gomer.rozetka.company/gomer/sellers/attributes/source/',
  attributes: '?SyncSourceAttributeSearch[attribute_id_title]=',
};
const category = {
  address: 'https://gomer.rozetka.company/gomer/sellers/attributes/source/',
  attributes: '?SyncSourceAttributeSearch[rz_category_id]=',
  param: '&SyncSourceAttributeSearch[attribute_id_title]=',
};
const vendor = {
  address: 'https://gomer.rozetka.company/gomer/sellers/vendors/source/',
  attributes: '?SyncSourceVendorSearch[producer_title]=',
};
const data = {
  param,
  category,
  vendor,
};
class Type {
  constructor(name, value) {
    this.value = value;
    this.data = data[name];
  }
  getAddres() {
    return this.data.address;
  }
  getAttributes() {
    return this.data.attributes + this.value;
  }
  getParam() {
    return this.getAttributes() + this.data.param;
  }
}
const createLink = (variant, source, param) => {
  const addres = variant.getAddres();
  const attributes = param
    ? variant.getParam() + param
    : variant.getAttributes();
  return `${addres}${source}${attributes}`;
};
const action = (column) => {
  const { variant, value, paramValue } = useSaveFormStore.getState();
  if (!variant) {
    throw `‚ùå –§–æ—Ä–º–∞ –Ω–∏–∂—á–µ üëá –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞`;
  }
  const lines = column.split('\n');
  if (lines.length > maxLines + 1) {
    // last line is empty
    throw `–í–≤–µ–¥–µ–Ω–æ –±—ñ–ª—å—à–µ ${maxLines} –¥–∂–µ—Ä–µ–ª`;
  }
  const type = new Type(variant, value);
  const links = [];
  for (const line of lines) {
    if (line === '') continue;
    links.push(createLink(type, line, paramValue));
  }
  openInNewTab(links);
};
export default {
  buttonColor: 'primary',
  buttonIcon: 'open',
  buttonTitle: '–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏',
  placeholder: '–í—Å—Ç–∞–≤ –∑ excel —Å—Ç–æ–≤–ø—á–∏–∫ –∑ source\n–¢–∞–∫–æ–≥–æ –≤–∏–¥—É: 31967',
  radioGroup: null,
  action,
};
